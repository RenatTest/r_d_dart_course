// FUTURE
void main() async {
  final dataFromServer = await getUserNameFromServer();
  print(dataFromServer);
  final result = hardWork();
  print(result);
}

Future<String> getUserNameFromServer() async {
  // 1
  // final result = await Future.delayed(
  //   Duration(seconds: 2),
  //   () => 'Renat Bakaiev',
  // );
  // 2 USE THEN - when send something to server and dont want to wait
  final result = await Future.delayed(
    Duration(seconds: 2),
  ).then((value) => 'Renat Bakaiev');
  return result;
}

// Why doesn't the UI freeze?
Future<String> hardWork() async {
  for (var i = 0; i < 300; i++) {
    await Future.delayed(Duration.zero);
    print(i);
  }
  return 'For done';
}

// üîç –©–æ —Ä–æ–±–∏—Ç—å Future.delayed(Duration.zero)?
// –¶–µ —Å—Ç–≤–æ—Ä—é—î –º—ñ–∫—Ä–æ–∑–∞–¥–∞—á—É (microtask), —è–∫–∞ –ø–ª–∞–Ω—É—î—Ç—å—Å—è –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ü–∏–∫–ª—É –ø–æ–¥—ñ–π.
// –í–æ–Ω–∞ —Ñ–∞–∫—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–¥–∞—î —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–∞–∑–∞–¥ –¥–æ event loop, –¥–æ–∑–≤–æ–ª—è—é—á–∏ UI –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏—Å—è —Ç–∞ –æ–±—Ä–æ–±–ª—è—Ç–∏ —ñ–Ω—à—ñ –ø–æ–¥—ñ—ó.
// –û—Ç–∂–µ, –∑–∞–≤–¥—è–∫–∏ await Future.delayed(Duration.zero) –∫–æ–∂–Ω–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è —Ü–∏–∫–ª—É –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –Ω–µ –ø–æ—Å–ø—ñ–ª—å, –∞ —á–µ—Ä–µ–∑ await, —â–æ:
// –≤—ñ–¥–¥–∞—î –∫–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–∞–∑–∞–¥ –≤ event loop;
// –¥–æ–∑–≤–æ–ª—è—î UI –∑–∞–ª–∏—à–∞—Ç–∏—Å—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–∏–º —ñ "–∂–∏–≤–∏–º";
// –Ω–µ –±–ª–æ–∫—É—î –≥–æ–ª–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫ (main/UI thread).

// Microtask

// void main() async {
//   print('A');
//   await Future(() {
//     print('B');
//     Future(() => print('C'));
//     Future.microtask(() => print('D'));
//     Future(() => print('E'));
//     print('F');
//   });
//   print('G');
// }

// üîç –î–µ—Ç–∞–ª—å–Ω–∏–π —Ä–æ–∑–±—ñ—Ä:
// üìå –û—Å–Ω–æ–≤–Ω–µ –ø—Ä–∞–≤–∏–ª–æ:
// Future() ‚Üí –ø–æ–¥—ñ—è (event queue)
// Future.microtask() ‚Üí –º—ñ–∫—Ä–æ–∑–∞–¥–∞—á–∞ (microtask queue)
// await –Ω–µ —á–µ–∫–∞—î –º—ñ–∫—Ä–æ–∑–∞–¥–∞—á, —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É —Ç—ñ–ª–∞ Future.

// üßæ –ü–æ–µ—Ç–∞–ø–Ω–æ:
// print('A') ‚Üí A
// await Future(() { ... }) –∑–∞–ø—É—Å–∫–∞—î —Ç—ñ–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ:
// print('B') ‚Üí B
// Future(() => print('C')) ‚Üí event queue
// Future.microtask(() => print('D')) ‚Üí microtask queue
// Future(() => print('E')) ‚Üí event queue
// print('F') ‚Üí F
// –¢—ñ–ª–æ Future –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å ‚Üí await –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è ‚Üí print('G') ‚Üí G
// –ü–æ—Ç—ñ–º –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è microtask ‚Üí D
// –ü–æ—Ç—ñ–º event queue:
// print('C') ‚Üí C
// print('E') ‚Üí E

// üîÅ –ü—ñ–¥—Å—É–º–æ–∫:
// A    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–æ–¥
// B    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–æ–¥ —É Future
// F    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–æ–¥ —É Future
// G    // –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è Future
// D    // Microtask
// C    // Event (Future)
// E    // Event (Future)
