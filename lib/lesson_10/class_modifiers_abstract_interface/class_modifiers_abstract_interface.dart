// Class modifiers abstract interface

// üîé –©–æ —Ç–∞–∫–µ abstract interface class?
// –¶–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –±–µ–∑ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ–π, —è–∫–∏–π:
// –ù–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–ø—Ä—è–º—É
// –ú–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ implements
// ‚úÖ –ú–æ–∂–µ –º–∞—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –º–µ—Ç–æ–¥–∏, –∞–ª–µ –≤–æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –ø—Ä–∏ implements
// –¢–æ–±—Ç–æ, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –º–µ—Ç–æ–¥ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ abstract interface, —Ç–∏ –≤—Å–µ –æ–¥–Ω–æ –º–∞—î—à –π–æ–≥–æ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∏—Ç–∏.

// üìå –ü—Ä–∏–∫–ª–∞–¥:
abstract interface class Logger {
  void log(String msg); // –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π
  void info(String msg) => log('[INFO] $msg'); // —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
}

class MyLogger implements Logger {
  @override
  void log(String msg) => print(msg);
  // üß† info –Ω–µ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ ‚Äî —Ç—Ä–µ–±–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ!
  @override
  void info(String msg) => log('Some message');
}

// üß† –ß–∞—Å—Ç—ñ –ø–æ–º–∏–ª–∫–∏:
// –î—É–º–∞—é—Ç—å, —â–æ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –º–µ—Ç–æ–¥–∏ –±—É–¥—É—Ç—å "—É—Å–ø–∞–¥–∫–æ–≤–∞–Ω—ñ" ‚Äî –Ω—ñ!
// –¶–µ–π —Ç–∏–ø –∫–ª–∞—Å—ñ–≤ –º–∞—î —Å–µ–Ω—Å –ª–∏—à–µ –≤ –º–µ–∂–∞—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏, –¥–µ extends –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π ‚Äî —Ç–æ–¥—ñ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è.
// –ü–æ–∑–∞–±—ñ–±–ª—ñ–æ—Ç–µ—á–Ω–æ ‚Äî implements ‚Üí —Ç–∏ –º–∞—î—à –ø–∏—Å–∞—Ç–∏ –≤—Å—é —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é –∑ –Ω—É–ª—è.

// ‚úÖ –©–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ:

// | –û–ø–µ—Ä–∞—Ü—ñ—è           | –î–æ–∑–≤–æ–ª–µ–Ω–æ?                  |
// | ------------------ | --------------------------- |
// | `implements`       | ‚úÖ –û–±–æ–≤'—è–∑–∫–æ–≤–µ               |
// | `extends`          | ‚úÖ —Ç—ñ–ª—å–∫–∏ –≤ –º–µ–∂–∞—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ |
// | `mixin on`         | ‚úÖ                           |
// | –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç–∞–Ω—Å—É | ‚ùå                           |

// üß∞ –ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏?
// –£ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞—Ö Dart/Flutter ‚Äî —è–∫ —á–∏—Å—Ç—ñ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏.

// –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
// UserRepository —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
// ThemeProvider —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
// State/Event –∫–ª–∞—Å–∏ –¥–ª—è BLoC
// CacheStrategy, StorageAdapter, HttpClient

// ‚úÖ –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —É Flutter-–ø—Ä–æ—î–∫—Ç—ñ
// === –ö–æ–Ω—Ç—Ä–∞–∫—Ç ===
abstract interface class UserRepository {
  Future<User> fetchUser();
  void log(String message) => print('[UserRepository]: $message');
}

// === –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è ===
class FirebaseUserRepository implements UserRepository {
  @override
  Future<User> fetchUser() async {
    log('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Firebase...');
    await Future.delayed(Duration(seconds: 1));
    return User('Renat', 39);
  }

  @override
  void log(String message) {
    print('üî• Firebase: $message');
  }
}

// === –ú–æ–¥–µ–ª—å ===
class User {
  final String name;
  final int age;
  User(this.name, this.age);
}

// === main() ===
void main() async {
  final UserRepository repo = FirebaseUserRepository();

  repo.log('–ó–∞–ø—É—Å–∫...');
  User user = await repo.fetchUser();

  print('üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${user.name}, ${user.age} —Ä–æ–∫—ñ–≤');
}
// ‚ö†Ô∏è –ú–µ—Ç–æ–¥ log() —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ abstract interface, 
// –∞–ª–µ –π–æ–≥–æ –≤—Å–µ –æ–¥–Ω–æ —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∏—Ç–∏ ‚Äî Dart —Ü—å–æ–≥–æ –Ω–µ —Ä–æ–±–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.