// Class modifiers abstract

// –©–æ —Ç–∞–∫–µ abstract?
// –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä abstract –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–ª–∞—Å—ñ–≤,
// —è–∫—ñ –Ω–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–ø—Ä—è–º—É (—Ç–æ–±—Ç–æ ‚Äî –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ new MyAbstractClass()), –∞–ª–µ —è–∫—ñ –º–æ–∂—É—Ç—å:
// –º—ñ—Å—Ç–∏—Ç–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –º–µ—Ç–æ–¥–∏ (–±–µ–∑ —Ç—ñ–ª–∞),
// –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è —è–∫ —à–∞–±–ª–æ–Ω–∏ –¥–ª—è —ñ–Ω—à–∏—Ö –∫–ª–∞—Å—ñ–≤.

abstract class Animal {
  void makeSound(); // –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –º–µ—Ç–æ–¥
}

// –¶–µ –æ–∑–Ω–∞—á–∞—î: –±—É–¥—å-—Ö—Ç–æ, —Ö—Ç–æ –Ω–∞—Å–ª—ñ–¥—É—î Animal, –º–∞—î —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ makeSound().

// | –û–ø–µ—Ä–∞—Ü—ñ—è           | –î–æ–∑–≤–æ–ª–µ–Ω–æ? |
// | ------------------ | ---------- |
// | `extends`          | ‚úÖ –¢–∞–∫      |
// | `implements`       | ‚úÖ –¢–∞–∫      |
// | `mixin on`         | ‚úÖ –¢–∞–∫      |
// | –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç–∞–Ω—Å—É | ‚ùå –ù—ñ       |

class Dog extends Animal {
  @override
  void makeSound() => print('–ì–∞–≤!');
}

void main() {
  Dog dog = Dog();
  dog.makeSound(); // –ì–∞–≤!
}

// üß† –ß–∞—Å—Ç—ñ –ø–æ–º–∏–ª–∫–∏ / –Ω—é–∞–Ω—Å–∏:
// ‚ùå –ù–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –µ–∫–∑–µ–º–ø–ª—è—Ä –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—É:
// Animal a = Animal(); // ‚ùå compile error

// ‚úÖ –ú–æ–∂–Ω–∞ –º–∞—Ç–∏ –º–µ—Ç–æ–¥–∏ –∑ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—î—é –≤ abstract –∫–ª–∞—Å—ñ:

abstract class Logger {
  void log(String msg);
  void info(String msg) => log('[INFO]: $msg'); // —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥
}

// üß∞ –ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ Flutter?
// abstract –∫–ª–∞—Å –∑ –±–∞–∑–æ–≤–æ—é –ª–æ–≥—ñ–∫–æ—é –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó–≤ –∞–±–æ —Å–µ—Ä–≤—ñ—Å—ñ–≤.

// –£ BLoC –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–¥—ñ–π –∞–±–æ —Å—Ç–∞–Ω—ñ–≤:

abstract class PageState {}

class LoadingState extends PageState {}

class LoadedState extends PageState {}

class ErrorState extends PageState {}
