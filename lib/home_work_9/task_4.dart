// Factory constructor

void main() {
  // 1
  final json = {'userName': 'Renat', 'isAdmin': true};
  final user = User.fromJson(json);
  print(user);
  // 2
  final color = Color.fromHex('#FF00FF');
  // print('2. Color: R=${color.red}, G=${color.green}, B=${color.blue}');
  print(color);
  // 3
  final id1 = IDGenerator.auto();
  final id2 = IDGenerator.auto();
  final id3 = IDGenerator.auto();
  print(id1);
  print(id2);
  print(id3);
  // 4
  final human = Person.young('Kim');
  print(human);
  // 5
  final status = UserStatus.fromAge(22);
  print(status);
  // 6
  final product = Product.fromJson({
    'title': 't-short',
    'price': 30.0,
    'id': 1,
  });
  print(product);
  // 7
  final figure = Rectangle.square(15.2);
  print(figure);
  // 8
  var logger1 = Logger();
  var logger2 = Logger();
  logger1.log('App started');
  logger2.log('User clicked button');
  logger1.printLogs();
  // 9
  var usd1 = Currency('USD');
  var usd2 = Currency('USD');
  var eur = Currency('EUR');

  print(usd1);
  print(usd2);
  print(eur);
  // 10
  final c1 = Connection();
  final c2 = Connection();
  final c3 = Connection();
  print('10. ${Connection.all}');
  // final c4 = Connection();
}

// –ó–∞–≤–¥–∞–Ω–Ω—è 1 ‚Äî User
// –°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å User –∑ –ø–æ–ª—è–º–∏:
// String username
// bool isAdmin
// –ó—Ä–æ–±–∏ —Ñ–∞–±—Ä–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:
// factory User.fromJson(Map<String, dynamic> json)
// —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î User –∑ Map:
// {
//   'username': 'Renat',
//   'isAdmin': true
// }

class User {
  final String userName;
  final bool isAdmin;

  User(this.userName, this.isAdmin);

  factory User.fromJson(Map<String, dynamic> json) {
    return User(json['userName'], json['isAdmin']);
  }

  @override
  String toString() => '1. User: $userName, is admin: $isAdmin';
}

// –ó–∞–≤–¥–∞–Ω–Ω—è 2 ‚Äî Color.fromHex
// –°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å Color –∑ –ø–æ–ª—è–º–∏:
// int red
// int green
// int blue
// –î–æ–¥–∞–π —Ñ–∞–±—Ä–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:
// factory Color.fromHex(String hex)
// —è–∫–∏–π:
// –ü—Ä–∏–π–º–∞—î —Å—Ç—Ä–æ–∫—É –≤–∏–¥—É '#FF00FF'
// –í–∏—Ä—ñ–∑–∞—î –∑ –Ω–µ—ó –ø–æ 2 —Å–∏–º–≤–æ–ª–∏ –Ω–∞ –∫–æ–∂–µ–Ω –∫–æ–ª—ñ—Ä:
// FF ‚Üí red
// 00 ‚Üí green
// FF ‚Üí blue
// –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ü—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ —à—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç–∫–æ–≤–æ–≥–æ —É –¥–µ—Å—è—Ç–∫–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç

class Color {
  final int red;
  final int green;
  final int blue;

  Color(this.red, this.green, this.blue);

  factory Color.fromHex(String hex) {
    Color colorConverted = Color(
      int.parse(hex.substring(1, 3), radix: 16),
      int.parse(hex.substring(3, 5), radix: 16),
      int.parse(hex.substring(5, 7), radix: 16),
    );
    return colorConverted;
  }

  @override
  String toString() => '2. Color: R=$red, G=$green, B=$blue';
}

// –ó–∞–≤–¥–∞–Ω–Ω—è 3 ‚Äî IDGenerator.auto()
// –°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å IDGenerator, —è–∫–∏–π:
// –ú–∞—î –ø–æ–ª–µ int id
// –ú–∞—î factory-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä IDGenerator.auto() ‚Äî –∫–æ–∂–µ–Ω —Ä–∞–∑ –≥–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +1 –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ)
// –¢–µ—Ö–Ω—ñ—á–Ω—ñ –¥–µ—Ç–∞–ª—ñ:
// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π —Å—Ç–∞—Ç–∏—á–Ω—É –∑–º—ñ–Ω–Ω—É –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ id
// –ó –∫–æ–∂–Ω–∏–º –Ω–æ–≤–∏–º –≤–∏–∫–ª–∏–∫–æ–º auto() ‚Äî —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç—É–π —ó—ó

class IDGenerator {
  final int id;
  static int _lastId = 0; // –∑–º—ñ–Ω–Ω–∞ —Å–ø—ñ–ª—å–Ω–∞ –¥–ª—è —É—Å—ñ—Ö –æ–±'—î–∫—Ç—ñ–≤ –∫–ª–∞—Å—É

  IDGenerator._(this.id); // –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä

  factory IDGenerator.auto() {
    // –§–∞–±—Ä–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–±—ñ–ª—å—à—É—î _lastId —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –æ–±‚Äô—î–∫—Ç
    _lastId++;
    return IDGenerator._(_lastId);
  }

  @override
  String toString() => '3. New ID: $id';
}

// 4. –ö–ª–∞—Å Person
// –ü–æ–ª—è name —ñ age.
// –§–∞–±—Ä–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Person.young(String name), —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –ª—é–¥–∏–Ω—É –∑ –≤—ñ–∫–æ–º 18 —Ä–æ–∫—ñ–≤.
// –ó–≤–∏—á–∞–π–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–∏–π–º–∞—î —ñ–º‚Äô—è —ñ –≤—ñ–∫.

class Person {
  final String name;
  final int age;

  Person(this.name, this.age);

  factory Person.young(String name) {
    return Person(name, 18);
  }

  @override
  String toString() => '4. Person: $name, age: $age';
}

// –ó–∞–≤–¥–∞–Ω–Ω—è 5: UserStatus
// –ü–æ–ª–µ status (—Ä—è–¥–æ–∫).
// –§–∞–±—Ä–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä UserStatus.fromAge(int age):
// –Ø–∫—â–æ –≤—ñ–∫ –º–µ–Ω—à–∏–π 18 ‚Äî status = "Minor".
// –Ø–∫—â–æ 18‚Äì65 ‚Äî status = "Adult".
// –Ø–∫—â–æ –±—ñ–ª—å—à–µ 65 ‚Äî status = "Senior".

class UserStatus {
  final String status;

  UserStatus(this.status);

  factory UserStatus.fromAge(int age) {
    String status;
    if (age < 18) {
      status = 'Minor';
    } else if (age >= 18 || age < 65) {
      status = 'Adult';
    } else {
      status = 'Senior';
    }

    return UserStatus(status);
  }

  @override
  String toString() => '5. User status: $status';
}

// Factory part 2

// –ó–∞–≤–¥–∞–Ω–Ω—è 6: –§–∞–±—Ä–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —ñ–∑ JSON
// –°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å Product, —è–∫–∏–π –º–∞—î –ø–æ–ª—è:
// id (int)
// title (String)
// price (double)
// –†–µ–∞–ª—ñ–∑—É–π —Ñ–∞–±—Ä–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:
// factory Product.fromJson(Map<String, dynamic> json)
// –¶–µ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ–≤–∏–Ω–µ–Ω —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–±'—î–∫—Ç Product —ñ–∑ JSON-–º–∞–ø–∏.

class Product {
  final int id;
  final String title;
  final double price;

  Product({required this.id, required this.title, required this.price});

  factory Product.fromJson(Map<String, dynamic> json) {
    return Product(id: json['id'], title: json['title'], price: json['price']);
  }

  @override
  String toString() => '6. Product name: $title, price: $price, id: $id';
}

// –ó–∞–≤–¥–∞–Ω–Ω—è 7: –ö–ª–∞—Å Rectangle
// –°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å Rectangle –∑ –ø–æ–ª—è–º–∏:
// width (double)
// height (double)
// –†–µ–∞–ª—ñ–∑—É–π —Ñ–∞–±—Ä–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Rectangle.square(double size), —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –∫–≤–∞–¥—Ä–∞—Ç (–ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–æ—é size).

class Rectangle {
  final double width;
  final double height;

  Rectangle(this.width, this.height);

  factory Rectangle.square(double size) {
    return Rectangle(size, size);
  }

  @override
  String toString() => '7. Rectangle width: $width, height: $height';
}

// –ó–∞–≤–¥–∞–Ω–Ω—è 8: –ö–ª–∞—Å Logger (Singleton —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä)
// –°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å Logger, —è–∫–∏–π:
// –ú–∞—î –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
// –†–µ–∞–ª—ñ–∑—É—î –ø–∞—Ç–µ—Ä–Ω Singleton —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ‚Äî —Ç–æ–±—Ç–æ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–¥–∏–Ω —ñ —Ç–æ–π —Å–∞–º–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä.
// –ú–∞—î –º–µ—Ç–æ–¥ log(String message), —è–∫–∏–π –¥–æ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Å–ø–∏—Å–æ–∫.
// –ú–∞—î –º–µ—Ç–æ–¥ printLogs(), —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—å.

class Logger {
  static Logger? _instance; // Singleton-–µ–∫–∑–µ–º–ø–ª—è—Ä
  final List<String> _logs = []; // –õ–æ–≥-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

  // –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
  Logger._internal();

  // —Ñ–∞–±—Ä–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
  factory Logger() {
    _instance ??= Logger._internal();
    return _instance!;
  }

  void log(String message) {
    _logs.add('8. $message');
  }

  void printLogs() {
    for (var msg in _logs) {
      print(msg);
    }
  }
}

// –ó–∞–≤–¥–∞–Ω–Ω—è 9: Factory Constructor –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º
// –ö–æ–Ω—Ç–µ–∫—Å—Ç:
// –£—è–≤–∏, —â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –æ–±'—î–∫—Ç–∏ –≤–∞–ª—é—Ç–∏, —ñ —Ç–∏ —Ö–æ—á–µ—à —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –µ–∫–∑–µ–º–ø–ª—è—Ä—ñ–≤.
// –ó–∞–≤–¥–∞–Ω–Ω—è:
// –°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å Currency, —è–∫–∏–π –º–∞—î:
// String code (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 'USD', 'EUR')
// –†–µ–∞–ª—ñ–∑—É–π —Ñ–∞–±—Ä–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, —è–∫–∏–π:
// –ü–æ–≤–µ—Ä—Ç–∞—î –æ–¥–∏–Ω —ñ —Ç–æ–π —Å–∞–º–∏–π –æ–±'—î–∫—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —ñ —Ç–æ–≥–æ —Å–∞–º–æ–≥–æ code (—Ç–æ–±—Ç–æ –∫–µ—à—É—î –µ–∫–∑–µ–º–ø–ª—è—Ä–∏).
// –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç –ª–∏—à–µ —è–∫—â–æ —Ç–∞–∫–æ–≥–æ code —â–µ –Ω–µ –±—É–ª–æ.
// üì¶ –¢–æ–±—Ç–æ: Currency('USD') —ñ—â–µ —Ä–∞–∑ ‚Üí –ø–æ–≤–µ—Ä—Ç–∞—î –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±‚Äô—î–∫—Ç 'USD'.
// üîÑ –¶–µ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è –∫–µ—à—É–≤–∞–Ω–Ω—è (cache or flyweight pattern).

class Currency {
  static final Map<String, Currency> _cache = {};
  // static –æ–∑–Ω–∞—á–∞—î, —â–æ —Ü–µ –ø–æ–ª–µ –∑–∞–≥–∞–ª—å–Ω–µ –¥–ª—è –≤—Å—ñ—Ö –æ–±'—î–∫—Ç—ñ–≤ –∫–ª–∞—Å—É.
  // final ‚Äî –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–º —Å–ª–æ–≤–Ω–∏–∫ –Ω–µ –∑–º—ñ–Ω–∏—Ç—å—Å—è (–∞–ª–µ –≤–º—ñ—Å—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞–≤–∞—Ç–∏/–∑–º—ñ–Ω—é–≤–∞—Ç–∏).

  final String code;

  // –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
  Currency._internal(this.code);
  // –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, —è–∫–∏–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ø–æ–ª–µ code.
  // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∫–ª–∞—Å—É –Ω–µ –º–æ–∂—É—Ç—å –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –π–æ–≥–æ –Ω–∞–ø—Ä—è–º—É, –ª–∏—à–µ —Ñ–∞–±—Ä–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.

  // –§–∞–±—Ä–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º
  factory Currency(String code) {
    return _cache.putIfAbsent(code, () => Currency._internal(code));
  }
  // –¶–µ —Ñ–∞–±—Ä–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î –≤–∂–µ —ñ—Å–Ω—É—é—á–∏–π –æ–±‚Äô—î–∫—Ç Currency –∑ –ø–µ–≤–Ω–∏–º code.
  // –ú–µ—Ç–æ–¥ putIfAbsent —Ä–æ–±–∏—Ç—å —Ç–∞–∫–µ:
  // –Ø–∫—â–æ –≤ _cache —î –∫–ª—é—á code ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î —ñ—Å–Ω—É—é—á–∏–π –æ–±‚Äô—î–∫—Ç.
  // –Ø–∫—â–æ –∫–ª—é—á–∞ –Ω–µ–º–∞—î ‚Äî –≤–∏–∫–æ–Ω—É—î —Ñ—É–Ω–∫—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ–±‚Äô—î–∫—Ç–∞ Currency._internal(code),
  // –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ _cache –ø—ñ–¥ –∫–ª—é—á–µ–º code —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Ü–µ–π –Ω–æ–≤–∏–π –æ–±‚Äô—î–∫—Ç.

  // –ó–∞–±–µ–∑–ø–µ—á—É—î –æ–¥–∏–Ω–∏—á–Ω–∏–π –æ–± º—î–∫—Ç (singleton) –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ–¥—É –≤–∞–ª—é—Ç–∏.
  // –Ø–∫—â–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–ª—å–∫–∞ Currency('USD'), –≤—Å—ñ –≤–æ–Ω–∏ –±—É–¥—É—Ç—å –ø–æ—Å–∏–ª–∞—Ç–∏—Å—è –Ω–∞ –æ–¥–∏–Ω —ñ —Ç–æ–π –∂–µ –æ–±‚Äô—î–∫—Ç.
  // –¶–µ –µ–∫–æ–Ω–æ–º–∏—Ç—å –ø–∞–º‚Äô—è—Ç—å —ñ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–æ, –∫–æ–ª–∏ –æ–±‚Äô—î–∫—Ç–∏ —î "—É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏" –∑–∞ —è–∫–∏–º–æ—Å—å –∫–ª—é—á–µ–º.

  @override
  String toString() => '9. Currency: $code';
}

// –ó–∞–≤–¥–∞–Ω–Ω—è 10:
// –°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å Connection, —è–∫–∏–π:
// –º–∞—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π id (int), —è–∫–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑—Ä–æ—Å—Ç–∞—î –∑ –∫–æ–∂–Ω–∏–º –Ω–æ–≤–∏–º –æ–±‚Äô—î–∫—Ç–æ–º;
// –º–∞—î —Ñ–∞–±—Ä–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, —è–∫–∏–π:
// –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞–∫—Å–∏–º—É–º 3 –æ–±‚Äô—î–∫—Ç–∏;
// —è–∫—â–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±—ñ–ª—å—à–µ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î null –∞–±–æ –∫–∏–¥–∞—î –≤–∏–Ω—è—Ç–æ–∫ (–Ω–∞ —Ç–≤—ñ–π –≤–∏–±—ñ—Ä);
// –∑–±–µ—Ä—ñ–≥–∞—î –≤—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –µ–∫–∑–µ–º–ø–ª—è—Ä–∏ —É —Å–ø–∏—Å–∫—É (List).
// –ü–æ–ª—è, —è–∫—ñ –º–∞—é—Ç—å –±—É—Ç–∏:
// int id
// —Å—Ç–∞—Ç–∏—á–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ int _count
// —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∑'—î–¥–Ω–∞–Ω—å: static List<Connection> all

class Connection {
  final int id;
  static int _count = 0; // ‚Äî –ª—ñ—á–∏–ª—å–Ω–∏–∫, —Å–∫—ñ–ª—å–∫–∏ –æ–±‚Äô—î–∫—Ç—ñ–≤ –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.
  static List<Connection> all = []; // ‚Äî —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –æ–±‚Äô—î–∫—Ç—ñ–≤.
  // –°—Ç–∞—Ç–∏—á–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –Ω–∞–ª–µ–∂–∞—Ç—å —Å–∞–º–æ–º—É –∫–ª–∞—Å—É, –∞ –Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–±'—î–∫—Ç—É. –í–æ–Ω–∏ —Å–ø—ñ–ª—å–Ω—ñ –¥–ª—è –≤—Å—ñ—Ö –µ–∫–∑–µ–º–ø–ª—è—Ä—ñ–≤.

  Connection._internal(this.id);
  // –¶–µ –∑–≤–∏—á–∞–π–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∞–ª–µ –∑ _internal ‚Äî –≤—ñ–Ω –ø—Ä–∏–≤–∞—Ç–Ω–∏–π (–≤–∏–¥–∏–º–∏–π –ª–∏—à–µ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–ª–∞—Å—É).
  // –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–æ–∑–≤–æ–ª—è—î –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±‚Äô—î–∫—Ç—ñ–≤,
  // –∑–º—É—à—É—é—á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —Ñ–∞–±—Ä–∏—á–Ω–∏–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º.

  factory Connection() {
    if (all.length < 3) {
      final connection = Connection._internal(_count + 1);
      _count++;
      all.add(connection);
      return connection;
    } else {
      throw Exception("Can't create more than 3 connections");
    }
  }
  // –Ø–∫—â–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –æ–±‚Äô—î–∫—Ç—ñ–≤ –º–µ–Ω—à–µ 3 (all.length < 3), —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –æ–±‚Äô—î–∫—Ç —á–µ—Ä–µ–∑
  // –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –ø—Ä–∏—Å–≤–æ—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π id (—á–µ—Ä–µ–∑ _count + 1).
  // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ _count++.
  // –î–æ–¥–∞—î–º–æ –æ–±‚Äô—î–∫—Ç —É —Å–ø–∏—Å–æ–∫ all.
  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±‚Äô—î–∫—Ç.
  // –Ø–∫—â–æ –≤–∂–µ 3 –æ–±‚Äô—î–∫—Ç–∏ —î, –∫–∏–¥–∞—î–º–æ –≤–∏–Ω—è—Ç–æ–∫.

  @override
  String toString() => 'Connection #$id';
}
