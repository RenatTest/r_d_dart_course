void main() {
  print('----------Task1-----------');
  Bird bird = Bird();
  bird.makeSound();
  bird.fly();
  print('----------Task2-----------');
  Car car = Car();
  Boat boat = Boat();
  car.move();
  car.charge();
  boat.move();
  print('----------Task3-----------');
  LoadingState loading = LoadingState();
  LoadedState loaded = LoadedState();
  ErrorState error = ErrorState();
  loading.describe();
  loaded.describe();
  error.describe();
  print('----------Task4-----------');
  final manager = ProfileManager();
  manager.emit(ProfileLoading());
  manager.emit(ProfileLoaded('Ren'));
  manager.emit(ProfileError('Not found'));
}

// üìù –ó–∞–≤–¥–∞–Ω–Ω—è 1
// –°—Ç–≤–æ—Ä–∏ abstract class Animal –∑ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–º –º–µ—Ç–æ–¥–æ–º makeSound().
// –°—Ç–≤–æ—Ä–∏ interface class CanFly –∑ –º–µ—Ç–æ–¥–æ–º fly() (–±–µ–∑ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó).
// –°—Ç–≤–æ—Ä–∏ final class Bird, —è–∫–∏–π:
// –ù–∞—Å–ª—ñ–¥—É—î Animal (extends)
// –†–µ–∞–ª—ñ–∑—É—î CanFly (implements)
// –†–µ–∞–ª—ñ–∑—É–π –º–µ—Ç–æ–¥–∏ makeSound() —ñ fly(), —â–æ–± –≤–æ–Ω–∏ –≤–∏–≤–æ–¥–∏–ª–∏ —É –∫–æ–Ω—Å–æ–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'Bird is chirping' —ñ 'Bird is flying').
// –£ —Ñ—É–Ω–∫—Ü—ñ—ó main() —Å—Ç–≤–æ—Ä–∏ –µ–∫–∑–µ–º–ø–ª—è—Ä Bird —ñ –≤–∏–∫–ª–∏—á –æ–±–∏–¥–≤–∞ –º–µ—Ç–æ–¥–∏.

abstract class Animal {
  void makeSound();
}

abstract interface class CanFly {
  void fly();
}

final class Bird extends Animal implements CanFly {
  @override
  void makeSound() {
    print('Bird is chirping');
  }

  @override
  void fly() {
    print('Bird is flying');
  }
}

// üìù –ó–∞–≤–¥–∞–Ω–Ω—è 2
// –°—Ç–≤–æ—Ä–∏ sealed class Vehicle –∑ –º–µ—Ç–æ–¥–æ–º move(), —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å "Vehicle is moving".
// –°—Ç–≤–æ—Ä–∏ –¥–≤–∞ –∫–ª–∞—Å–∏, —è–∫—ñ –Ω–∞—Å–ª—ñ–¥—É—é—Ç—å Vehicle:
// Car ‚Äî –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á –º–µ—Ç–æ–¥ move(), —â–æ–± –≤–∏–≤–æ–¥–∏—Ç–∏ "Car is driving".
// Boat ‚Äî –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á –º–µ—Ç–æ–¥ move(), —â–æ–± –≤–∏–≤–æ–¥–∏—Ç–∏ "Boat is sailing".
// –°—Ç–≤–æ—Ä–∏ mixin Electric –∑ –º–µ—Ç–æ–¥–æ–º charge() ‚Äî –≤–∏–≤–æ–¥–∏—Ç—å "Charging battery".
// –î–æ–¥–∞–π –∑–º—ñ—à—É–≤–∞–Ω–Ω—è Electric —É –∫–ª–∞—Å Car.
// –£ main() —Å—Ç–≤–æ—Ä–∏ –µ–∫–∑–µ–º–ø–ª—è—Ä–∏ Car —ñ Boat. –í–∏–∫–ª–∏—á —É –∫–æ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥ move(), –∞ —É Car –¥–æ–¥–∞—Ç–∫–æ–≤–æ ‚Äî charge().

sealed class Vehicle {
  void move() {
    print('Vehicle is moving');
  }
}

mixin Electric {
  void charge() {
    print('Charging battery');
  }
}

class Car extends Vehicle with Electric {
  @override
  void move() {
    print('Car is driving');
  }
}

class Boat extends Vehicle {
  @override
  void move() {
    print('Boat is sailing');
  }
}

// üìù –ó–∞–≤–¥–∞–Ω–Ω—è 3
// –°—Ç–≤–æ—Ä–∏ sealed class State –∑ –º–µ—Ç–æ–¥–æ–º describe(), —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å "Base state".
// –£—Å–µ—Ä–µ–¥–∏–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ —Å—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å–∏:
// LoadingState ‚Äî –Ω–∞—Å–ª—ñ–¥—É—î State, –º–µ—Ç–æ–¥ describe() –≤–∏–≤–æ–¥–∏—Ç—å "Loading...".
// LoadedState ‚Äî –Ω–∞—Å–ª—ñ–¥—É—î State, –º–µ—Ç–æ–¥ describe() –≤–∏–≤–æ–¥–∏—Ç—å "Data loaded".
// –°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å ErrorState, —è–∫–∏–π —Ä–µ–∞–ª—ñ–∑—É—î State —á–µ—Ä–µ–∑ implements, –∞–ª–µ –Ω–µ –Ω–∞—Å–ª—ñ–¥—É—î (extends). –†–µ–∞–ª—ñ–∑—É–π –º–µ—Ç–æ–¥ describe(), —â–æ–± –≤–∏–≤–æ–¥–∏—Ç–∏ "Error occurred".
// –£ main() —Å—Ç–≤–æ—Ä–∏ –ø–æ –µ–∫–∑–µ–º–ø–ª—è—Ä—É –∫–æ–∂–Ω–æ–≥–æ —Å—Ç–∞–Ω—É —ñ –≤–∏–∫–ª–∏—á —ó—Ö–Ω—ñ –º–µ—Ç–æ–¥–∏ describe().
// –ú–µ—Ç–∞:
// –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä—ñ–∑–Ω–∏—Ü—é –º—ñ–∂ –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è–º (extends) —ñ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—î—é —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É (implements) –¥–ª—è sealed class.
// –ó–∞–∫—Ä—ñ–ø–∏—Ç–∏ —Ä–æ–∑—É–º—ñ–Ω–Ω—è, —â–æ sealed class –∫–æ–Ω—Ç—Ä–æ–ª—é—î –ø—ñ–¥–∫–ª–∞—Å–∏ (—á–µ—Ä–µ–∑ extends), –∞–ª–µ –Ω–µ –∑–∞–±–æ—Ä–æ–Ω—è—î —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é.

sealed class State {
  void describe() {
    print('Base state');
  }
}

class LoadingState extends State {
  @override
  void describe() {
    print('Loading...');
  }
}

class LoadedState extends State {
  @override
  void describe() {
    print('Data loaded');
  }
}

class ErrorState implements State {
  @override
  void describe() {
    print('Error occurred');
  }
}

// üìù –ó–∞–≤–¥–∞–Ω–Ω—è 4 (–∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–µ)
// –¢–∏ —Å—Ç–≤–æ—Ä—é—î—à —Å–∏—Å—Ç–µ–º—É —Å—Ç–∞–Ω—ñ–≤ —ñ –ø–æ–¥—ñ–π –¥–ª—è —É–º–æ–≤–Ω–æ–≥–æ UI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é):
// –°—Ç–≤–æ—Ä–∏ sealed class ProfileState, —è–∫–∞ –º–∞—Ç–∏–º–µ –±–∞–∑–æ–≤–∏–π –º–µ—Ç–æ–¥ status().
// –°—Ç–≤–æ—Ä–∏ –ø—ñ–¥–∫–ª–∞—Å–∏:
// ProfileLoading
// ProfileLoaded (–¥–æ–¥–∞–π –ø–æ–ª–µ String name)
// ProfileError (–¥–æ–¥–∞–π –ø–æ–ª–µ String message)
// –°—Ç–≤–æ—Ä–∏ interface class EventHandler, –¥–µ –±—É–¥–µ –º–µ—Ç–æ–¥ handle().
// –°—Ç–≤–æ—Ä–∏ mixin Logger, —è–∫–∏–π –¥–æ–¥–∞—î –º–µ—Ç–æ–¥ log(String msg) ‚Äî –≤—ñ–Ω –ø—Ä–æ—Å—Ç–æ –≤–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –∫–æ–Ω—Å–æ–ª—å.
// –°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å ProfileManager, —è–∫–∏–π:
// –†–µ–∞–ª—ñ–∑—É—î EventHandler
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Logger
// –ú–∞—î –º–µ—Ç–æ–¥ emit(ProfileState) ‚Äî –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É —Å—Ç–∞–Ω—É, –≤–∏–∫–æ–Ω—É—î status() —ñ –≤–∏–∫–ª–∏–∫–∞—î log().

// –£ main():
// –°—Ç–≤–æ—Ä–∏ ProfileManager
// –ü–µ—Ä–µ–¥–∞–π –π–æ–º—É –∫—ñ–ª—å–∫–∞ —Å—Ç–∞–Ω—ñ–≤ (ProfileLoading, ProfileLoaded('Anna'), ProfileError('Not found')) —ñ –≤–∏–∫–ª–∏—á emit(...).

sealed class ProfileState {
  void status();
}

class ProfileLoading extends ProfileState {
  @override
  status() {
    print('Loading...');
  }
}

class ProfileLoaded extends ProfileState {
  final String name;
  ProfileLoaded(this.name);

  @override
  status() {
    print('Loaded');
  }
}

class ProfileError extends ProfileState {
  final String message;
  ProfileError(this.message);

  @override
  status() {
    print('Error');
  }
}

interface class EventHandler {
  void handle() {}
}

mixin Logger {
  void log(String msg) {
    print(msg);
  }
}

class ProfileManager with Logger implements EventHandler {
  @override
  void handle() {
    print('Handling event...');
  }

  void emit(ProfileState state) {
    state.status();
    if (state is ProfileLoading) {
      log('Loading started');
    } else if (state is ProfileLoaded) {
      log('Data loaded for ${state.name}');
    } else if (state is ProfileError) {
      log('Error: ${state.message}');
    }
  }
}
